<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://jtgonzo.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jtgonzo.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-03-23T16:47:50+00:00</updated><id>https://jtgonzo.github.io/feed.xml</id><title type="html">Jose Thiago Gonsalves</title><subtitle>My personal porfolio website highlighting current projects and acquired skills. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">1st Phase of Github FSI repository updating has begun!!</title><link href="https://jtgonzo.github.io/blog/2024/post-2/" rel="alternate" type="text/html" title="1st Phase of Github FSI repository updating has begun!!"/><published>2024-03-15T20:11:00+00:00</published><updated>2024-03-15T20:11:00+00:00</updated><id>https://jtgonzo.github.io/blog/2024/post-2</id><content type="html" xml:base="https://jtgonzo.github.io/blog/2024/post-2/"><![CDATA[<p>With my time as a garduate student coming to a close I am finally able to take a breath and reflect on my experience and the skills that I have acquired. In particular, I am left thinking about the process of learning itself and specifically about my indebtedness to that vast community of benevolent thinkers that willingly share their ideas/projects, resources, and wisdon via online forum/medium. As such, with the motivation to play my part (now having some time to do so :sweat_smile:), I am currently in the process of compiling, cleaning, organizing, and packaging various useful resources that I have collected, digest and reworked, and independently developed over the last few years. This really should have been happening in real time but alas grad school (- right!? :grin:)</p> <hr/> <h2 id="high-fidelity-2d--3d-fsi-solvers">High-Fidelity (2D &amp; 3D) FSI Solvers</h2> <p>To begin this unassumingly gargantuan task; I will start with the computational fluid-structure interaction tools that I have collected and personally developed. These resources fall into one of the following 4 catagories that have each been given their own Github reposirtory;</p> <ol> <li><a href="https://github.com/JTGonzo/Monolithic_FSI">Monolithic Fluid Structure Interaction solvers</a></li> <li><a href="https://github.com/JTGonzo/Single_Physics_Solvers">Single Domain (CFD &amp; CSM) solvers</a></li> <li><a href="https://github.com/JTGonzo/Partitioned_FSI">Partitioned (strongly coupled) Fluid Structure Interaction solvers</a></li> <li><a href="https://github.com/JTGonzo/Multi-Threaded_Partitioned_FSI">Parallelized Partitioned FSI solvers</a></li> </ol> <p>that operate as standalone toolkits for the interested user to independently download and freely use.</p> <p>These codes were very recently uploaded <code class="language-plaintext highlighter-rouge">(March 20th, 2024)</code> from my system and have yet to be vetted for general distribution/use. I am currently working through commenting, cleaning and re-testing these solver which were put together approximately 1 year ago. So please allow me the next few weeks to clean up the codes so as to make them more instructive, easy to use, and bug-free. If the reader is still compelled to experiment, however, I encourgae them to do so <strong>BUT</strong> I <strong>strongly</strong> recommend they <strong>carefully</strong> review the instructions and disclaimers provided in each of the repositories shared.</p> <hr/> <h2 id="redbkit-based-solvers-disclaimer-and-rationale">(redbKIT-based) Solvers Disclaimer and Rationale</h2> <p>Given that the majority of my solvers are largely derived from the monolithic FSI toolkit <a href="https://github.com/redbKIT/redbKIT">redbKIT</a> it is only right that I acknowledge their incredible work <code class="language-plaintext highlighter-rouge">without which my research could not have happened</code>. The redbKIT-based CFD, CSM and <code class="language-plaintext highlighter-rouge">monolithic</code> FSI solvers found in the repositories are bare-bones deconstructions (/simplifications) of the original toolkit. At face value they are exclusively the intellectual property of the original creators with a few original lines of functional code included for initialization, data output, and operational purposes.</p> <p>redbKIT is a MATLAB library for finite element simulation and reduced-order modeling of Partial Differential Equations developed at <a href="https://www.epfl.ch/">EPFL</a> - <a href="http://cmcs.epfl.ch/">Chair of Modeling and Scientific Computing</a>). In particular, it includes straightforward implementations of many of the algorithms presented in the companion book:</p> <blockquote> <p><a href="https://link.springer.com/book/10.1007/978-3-319-15431-2#aboutBook"><strong>[QMN16] A. Quarteroni, A. Manzoni, F. Negri. Reduced Basis Methods for Partial Differential Equations. An Introduction</strong>, Springer, 2016.</a></p> </blockquote> <p>redbKIT was developed and is currently maintained by <a href="https://www.linkedin.com/in/negrifederico/"><code class="language-plaintext highlighter-rouge">Federico Negri</code></a> who also gives credit in kind to the work of Paola Gervasio (Università degli Studi di Brescia) who he acknowledges for granting use of parts of the finite element code MLife.</p> <blockquote> <p>For absolute clarity, the <a href="https://github.com/redbKIT/redbKIT"><strong>redbKIT</strong></a> toolkit by itself is an <strong><em>AMAZING</em></strong> resource for (young) academics seeking an education on the finite element method and reduced-order modelling. As such, I <strong>strongly</strong> recommend the reader fork that repository and work through redbKIT’s numerous well crafted example problems.</p> </blockquote> <p>Having said that, however, as is true for (almost) all <strong>well developed / robust</strong> software packages used to tackle complex problems in computational physics; its sophistication tends to be its own undoing for those novice students beginning their journey in the simulation sciences or those young numerical methods researchers who are focusing on a niche element of the problem/framework/technique and just want the machinery around the issue to be (first) working and (secondly) easily digestible for peace of mind, debugging, development etc. purposes. As such, the codes that I have provided seek to shallow the learning curve and expedite the toolkit’s adoption/integration.</p> <p>To summarily reiterate; while the redbKIT toolkit should be the primary reference point for the interested reader, it is my belief that the condensed solvers (as presented here in their simplified intermediary forms) hold their own unique value to the wider student/research community. In particular, for the purposes of streamlined learning, efficient tool adoption, and additional/alternative technique development. This was most certainly my case where the ability to quickly validate (/experiment with) the domain solvers themselves - when treated independently of each other - made integrating them into a partitioned fluid-structure interaction framework significantly easier.</p> <h2 id="watch-this-space">Watch This Space</h2> <p>There is considerably more resources//tools that I have stored on my various devices that I plan to also share with the wider research community in the coming months. This will be a somewhat slow processs, unfortunately, given the diversity and complexity of the problems pursued, and the necessity that each resource be complete, digestible, and immediately useful before being shared. I strongly encourage the reader, however, to return to this space peridoically for potential updates in the fields of;</p> <ol> <li>Reduced or Physics Modelling (PINNs)</li> <li>Version Control and Collaborative Tool Use</li> <li>Digital Twins</li> <li>Naval Architecture and Marine Engineering Software</li> </ol>]]></content><author><name></name></author><category term="multi-physics"/><category term="programming"/><summary type="html"><![CDATA[compiling, cleaning, organizing, and packaging a series of useful tools thus far developed and collected]]></summary></entry><entry><title type="html">Validation of Partitioned FSI framework completed</title><link href="https://jtgonzo.github.io/blog/2023/post-1/" rel="alternate" type="text/html" title="Validation of Partitioned FSI framework completed"/><published>2023-06-30T20:11:00+00:00</published><updated>2023-06-30T20:11:00+00:00</updated><id>https://jtgonzo.github.io/blog/2023/post-1</id><content type="html" xml:base="https://jtgonzo.github.io/blog/2023/post-1/"><![CDATA[<h2 id="probelm-statement">Probelm Statement</h2> <p>In order to study the <a href="https://jtgonzo.github.io/">“<em>coupling instability of low mass-ratio partitioned FSI simulations</em>”</a> I first needed to develop a robust partitioned numerical framework that was able to capably handle the challenges of problematic FSI simulation configurations. To this end, after much struggling and wondering in the dark, I was <strong>FINALLY</strong> able to develop a suite of 2D and 3D high-fidelity <a href="](https://github.com/JTGonzo/Partitioned_FSI)">partitioned FSI codes</a>. Achieving this feat is a source of real personal pride; as without proper guidance or an intimate knowledge of the fundamental instability intrinsic to the problem, great effort was required (often involving numerous protracted periods of brutal trial and error) to amass a complete and homogenous set of numerical tools to tackle this difficult problem.</p> <p>In the end (having experimented on the gamut of available open-source resources) the majority of my eventually developed code-based was derived from a source <a href="https://github.com/JTGonzo/Monolithic_FSI">(redbKIT-based) monolithic FSI</a> solver. These solvers were decomposed from the original <a href="https://github.com/redbKIT/redbKIT">toolkit</a> into their baseline elements and were then strategically reassembled and further built upon until a sufficiently robust <strong>partitioned</strong> FSI scheme was attained. In particular, was the required integration of appropriate conservative Dirchlet and Neummann interfacial boundary conditions into the (independently treated) fluid and structural solvers, respectively. These additions, as well as all the other requisite algorithmic logic,interfacial data mapping, and iterative stabalization techniques also added thus make the partitoned codes developed here a “semi”-unique product in their own right.</p> <hr/> <h2 id="coupling-features">Coupling Features</h2> <p>Features unique to a partitioned strategy that I have integrated into my developed framework include:<br/></p> <ul> <li>Coupling Methods: <ul> <li>Anderson Acceleration</li> <li>Generalized Broyden</li> <li>Broyden’s Second Method</li> <li>Multi-Vector Least Square</li> <li>Dynamic Aitken Relaxation</li> <li>Constant Relaxation</li> <li>Pure Gauss-Seidel Iterations</li> </ul> </li> <li>Filtering Strategies: <ul> <li>QR1 Filtering</li> <li>QR2 (Classic Gram-Schmidt) Filtering</li> <li>QR2 (Modified Gram-Schmidt) Filtering</li> <li>QR2 (Householder Reflections) Filtering</li> <li>POD Filtering</li> </ul> </li> <li>Interface Mapping Techniques: <ul> <li>Nearest Neighbour Interpolation</li> <li>Projection and Linear Interpolation</li> <li>Radial Basis Function Interpolation</li> </ul> </li> <li>Extrapolation Methods: <ul> <li>Constant</li> <li>Linear</li> <li>Quadratic</li> <li>Cubic</li> </ul> </li> <li><a href="https://github.com/JTGonzo/Multi-Threaded_Partitioned_FSI">Work in Progress Tools</a>: <ul> <li>Interface Tracking</li> <li>Adaptive Regularization Least Squares</li> <li>Selective Secant Inclusion</li> <li>Truncated SVD Filtering</li> </ul> </li> </ul> <hr/> <h2 id="framework-validation">Framework Validation</h2> <p>To validate the accuracy of the developed partitioned framework, I <strong>successfully</strong> compared my results from three challenging FSI benchmarks againts those results presented in the literature and that produced by established commercial software. These results served mainly to demonstrate the accuracy of the domain solvers themselves and, generally speaking, the robustness of the scheme to handle complex FSI problems with strong added-mass effects, high structural nonlinearity, and considerable mesh deformation. The benchmarks successfully reproduced included;</p> <p><ins><strong>Benchmark Cases</strong></ins><br/></p> <ul> <li> 2D Incompressible Flow over a Cantilevered Elastic Beam</li> <li> 3D Pressure Pulse Propogation through an Elastic Tube</li> </ul> <p>details of the validation procedure and the confirming results generated are given on this website’s companion <a href="https://jtgonzo.github.io/projects/">projects</a> page.</p>]]></content><author><name></name></author><category term="multi-physics"/><category term="programming"/><summary type="html"><![CDATA[successfully compared my developed framework results against established 2D and 3D FSI benchmarks]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://jtgonzo.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://jtgonzo.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://jtgonzo.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>